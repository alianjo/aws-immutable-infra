name: AWS Immutable Infrastructure CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.6.0
  PACKER_VERSION: 1.9.4

jobs:
  # Job 1: Build AMI with Packer
  build-ami:
    name: Build AMI with Packer
    runs-on: ubuntu-latest
    outputs:
      ami-id: ${{ steps.get-ami-id.outputs.ami-id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup Packer
      uses: hashicorp/setup-packer@v2
      with:
        packer_version: ${{ env.PACKER_VERSION }}
        
    - name: Validate Packer template
      run: |
        cd packer
        packer validate nginx.pkr.hcl
        
    - name: Build AMI
      run: |
        cd packer
        packer plugins install github.com/hashicorp/amazon
        packer build nginx.pkr.hcl
        
    - name: Get AMI ID
      id: get-ami-id
      run: |
        AMI_ID=$(aws ec2 describe-images \
          --owners self \
          --filters "Name=name,Values=nginx-immutable-*" \
          --region $AWS_REGION \
          --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' \
          --output text)
        echo "$AMI_ID" > ami-id.txt
        echo "ami-id=$AMI_ID" >> $GITHUB_OUTPUT
        echo "Built AMI: $AMI_ID"
        
    - name: Upload AMI ID as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ami-id
        path: ami-id.txt
        retention-days: 30

  # Job 2: Terraform Plan
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: build-ami
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Download AMI ID
      uses: actions/download-artifact@v4
      with:
        name: ami-id
        
    - name: Terraform Format Check
      run: |
        cd terraform
        terraform fmt -check -recursive
        
    - name: Terraform Init
      run: |
        cd terraform
        terraform init
        
    - name: Terraform Validate
      run: |
        cd terraform
        terraform validate
        
    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var="key_name=${{ secrets.AWS_KEY_NAME }}" -out=tfplan
      
    - name: Upload Terraform Plan
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: terraform/tfplan
        retention-days: 1

  # Job 3: Deploy Infrastructure
  deploy-infrastructure:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: [build-ami, terraform-plan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan
        
    - name: Terraform Init
      run: |
        cd terraform
        terraform init
        
    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve tfplan
        
    - name: Get ALB DNS Name
      id: get-alb-dns
      run: |
        cd terraform
        ALB_DNS=$(terraform output -raw alb_dns_name)
        echo "alb-dns=$ALB_DNS" >> $GITHUB_OUTPUT
        echo "Website URL: http://$ALB_DNS"
        
    - name: Health Check
      run: |
        ALB_DNS="${{ steps.get-alb-dns.outputs.alb-dns }}"
        echo "Waiting for ALB to be ready..."
        sleep 60
        
        for i in {1..10}; do
          if curl -f -s "http://$ALB_DNS/health" > /dev/null; then
            echo "✅ Health check passed!"
            exit 0
          else
            echo "⏳ Attempt $i/10: Health check failed, retrying in 30 seconds..."
            sleep 30
          fi
        done
        echo "❌ Health check failed after multiple attempts"
        exit 1

  # Job 4: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-ami
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Job 5: Cleanup (on failure)
  cleanup:
    name: Cleanup on Failure
    runs-on: ubuntu-latest
    needs: [build-ami, terraform-plan, deploy-infrastructure]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Cleanup old AMIs and snapshots
      run: |
        NOW=$(date -d '7 days ago' --iso-8601)
        aws ec2 describe-images \
          --owners self \
          --filters "Name=name,Values=nginx-immutable-*" \
          --region $AWS_REGION \
          --query "Images[?CreationDate<\`$NOW\`].{ID:ImageId,Snap:BlockDeviceMappings[0].Ebs.SnapshotId}" \
          --output text | while read image snapshot; do
            echo "Deregistering AMI: $image"
            aws ec2 deregister-image --image-id $image
            if [ "$snapshot" != "None" ]; then
              echo "Deleting Snapshot: $snapshot"
              aws ec2 delete-snapshot --snapshot-id $snapshot
            fi
          done
